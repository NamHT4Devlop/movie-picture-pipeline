name: Frontend Continuous Integration Workflow

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - development
    paths:
      - "starter/frontend/**"

jobs:

  lint:
    name: Frontend Linting Jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x  # Đảm bảo bạn sử dụng đúng phiên bản Node.js

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('starter/frontend/package-lock.json') }}  # Đảm bảo sử dụng đường dẫn đúng
          restore-keys: |
            npm-

      - name: Install dependencies
        run: npm install
        working-directory: ./starter/frontend  # Đảm bảo đúng thư mục

      - name: Run ESLint
        run: npm run lint -- --fix
        working-directory: ./starter/frontend  # Đảm bảo đúng thư mục

      - name: Run Tests
        run: npm test
        working-directory: ./starter/frontend  # Đảm bảo đúng thư mục

  test:
    name: Frontend Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install
        working-directory: ./starter/frontend  # Đảm bảo đúng thư mục

      - name: Run Tests
        run: npm test
        working-directory: ./starter/frontend  # Đảm bảo đúng thư mục

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install
        working-directory: ./starter/frontend  # Đảm bảo đúng thư mục

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Debug AWS Credentials
        run: |
          aws sts get-caller-identity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          aws eks update-kubeconfig --name cluster
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo $EXTERNALIP
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg REACT_APP_MOVIE_API_URL=http://$EXTERNALIP ./starter/frontend  # Đảm bảo đúng thư mục và docker build context
          docker images

      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: ~/.docker
          key: docker-${{ github.sha }}-frontend
