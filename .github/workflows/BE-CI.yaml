name: Backend CI Workflow

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - master
      - development
    paths:
      - "backend/**"

jobs:
  lint:
    name: Backend Linting Jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache Pipenv Packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pipenv
          key: pipenv-${{ runner.os }}-${{ hashFiles('backend/Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Setup Install pipenv
        run: pip install pipenv

      - name: Setup Install dependencies
        run: |
          pip --version
          pipenv install && pip install flake8
        working-directory: ./backend

      - name: Run lint with pipenv
        run: |
          pipenv --version
          pipenv run lint
        working-directory: ./backend

  test:
    name: Backend Execute Test Cases
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Install pipenv
        run: |
          pip --version
          pip install pipenv
        working-directory: ./backend

      - name: Setup Install dependencies
        run: |
          pip --version
          pipenv install
        working-directory: ./backend

      - name: Execute Test Cases with pipenv
        run: |
          pipenv --version
          pipenv run test
        working-directory: ./backend

  build:
    name: Build and Upload Container Image to ECR
    runs-on: ubuntu-latest
    needs: [ lint, test ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Debug AWS Credentials
        run: |
          aws sts get-caller-identity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Debug Variables
        run: |
          echo "Registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "Repository: backend"
          echo "Image Tag: latest"      

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ~/.docker
          key: docker-${{ github.sha }}-backend
          restore-keys: |
            docker-${{ github.sha }}-

      - name: Build Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: latest
        run: |
          # Validate REGISTRY, REPOSITORY, and IMAGE_TAG
          if [ -z "$REGISTRY" ]; then
            echo "Error: REGISTRY is empty."
            exit 1
          fi
          if [ -z "$REPOSITORY" ]; then
            echo "Error: REPOSITORY is empty."
            exit 1
          fi
          if [ -z "$IMAGE_TAG" ]; then
            echo "Error: IMAGE_TAG is empty."
            exit 1
          fi

          echo "Building Docker image with the following details:"
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"

          # Build the Docker image
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./backend/Dockerfile ./backend

      - name: Push Docker image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: latest
        run: |
          echo "Pushing Docker image to ECR"
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"

          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG