name: Backend CI Workflow

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - master
      - development
    paths:
      - "backend/**"

jobs:
  setup:
    name: Setup Python and Dependencies
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup-python.outputs.python-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pipenv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pipenv
          key: pipenv-${{ runner.os }}-${{ hashFiles('backend/Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        run: |
          pipenv install --dev
        working-directory: ./backend

  lint:
    name: Backend Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pipenv
        run: pip install pipenv

      - name: Run lint with pipenv
        run: |
          pipenv run lint
        working-directory: ./backend

  test:
    name: Backend Execute Test Cases
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pipenv
        run: pip install pipenv

      - name: Run tests with pipenv
        run: |
          pipenv run test
        working-directory: ./backend

  build:
    name: Build and Upload Container Image to ECR
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Debug AWS Credentials
        run: |
          aws sts get-caller-identity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ~/.docker
          key: docker-${{ github.sha }}-backend
          restore-keys: |
            docker-${{ github.sha }}-

      - name: Build Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: latest
        run: |
          # Log environment variables
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"

          # Log Dockerfile path
          echo "Dockerfile path: ./backend/Dockerfile"

          # List current Docker images before build
          echo "Current Docker images:"
          docker images

          # Build the Docker image
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./backend/Dockerfile ./backend

          # Check the built Docker image
          echo "Built Docker image:"
          docker images | grep $REGISTRY/$REPOSITORY

          # Check if the build was successful or failed
          if [ $? -eq 0 ]; then
            echo "Docker image build succeeded."
          else
            echo "Docker image build failed."
            exit 1
          fi

      - name: Push Docker image to ECR
        run: |
          echo "Pushing Docker image to ECR"
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"

          # Push Docker image
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

          # Kiểm tra mã thoát của lệnh docker push
          if [ $? -eq 0 ]; then
            echo "Docker image pushed successfully!"
          else
            echo "Docker image push failed!"
            exit 1
          fi