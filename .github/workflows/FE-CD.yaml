name: Frontend CD Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
      - development
    paths:
      - 'frontend/**'
env:
  NODE_VERSION: 18.x

jobs:
  lint:
    name: Lint Frontend Code Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Node.js Packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Setup Install Packages
        run: |
          npm install

      - name:  Execute run ESLint
        run: |
          npm run lint -- --fix

  test:
    name: Run Frontend Unit Tests Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          npm install

      - name: FE Execute Test Case
        run: |
          npm test

  build:
    name: Build Docker Image and Push to ECR
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Install dependencies
        run: |
          npm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Debug AWS Credentials
        run: |
          aws sts get-caller-identity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Connect to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build and Push Docker Image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          echo "=== Step: Updating kubeconfig for EKS ==="
          aws eks update-kubeconfig --name cluster
          echo "Kubeconfig updated successfully"

          echo "=== Step: Fetching External IP of Backend Service ==="
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo "Fetched External IP: $EXTERNALIP"

          echo "=== Step: Logging Docker Image Details ==="
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          echo "React App Movie API URL: http://$EXTERNALIP"

          echo "=== Step: Building Docker Image ==="
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg REACT_APP_MOVIE_API_URL=http://$EXTERNALIP .
          echo "Docker Image Built Successfully"

          echo "=== Step: Listing Docker Images ==="
          docker images

          echo "=== Step: Pushing Docker Image to ECR ==="
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "Docker Image Pushed Successfully"

  deploy:
    name: Deploy Frontend to Kubernetes
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Debug AWS Credentials
        run: |
          aws sts get-caller-identity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Connect to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name cluster

      - name: Run init.sh
        run:  |
          ./init.sh || true
        working-directory: ./setup

      - name: Set Docker image in Kustomize
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          echo "Step: Setting Docker image in Kustomize"
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          echo "Updating Kustomize configuration with the image: $REGISTRY/$REPOSITORY:$IMAGE_TAG"

          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "Kustomize configuration updated successfully"
        working-directory: ./frontend/k8s

      - name: Apply Kubernetes Resources
        run: |
          echo "Building Kubernetes manifests..."
          kustomize build ./frontend/k8s > k8s-manifest.yaml
          echo "Generated Kubernetes manifests:"
          cat k8s-manifest.yaml

          echo "Applying Kubernetes resources..."
          kubectl apply -f k8s-manifest.yaml

          echo "Deployment status:"
          kubectl rollout status deployment/frontend-deployment -n <your-namespace>
          echo "Kubernetes resources applied successfully!"
        working-directory: ./frontend/k8s