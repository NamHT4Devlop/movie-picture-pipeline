name: Backend CD Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
      - development
    paths:
      - 'backend/**'

jobs:
  lint:
    name: Backend Linting Jobs
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache Pipenv Packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pipenv
          key: pipenv-${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Setup Install pipenv with pip
        run: |
          pip --version
          pip install pipenv && pip install flake8

      - name: Setup Install dependencies with pip
        run: |
          pip --version
          pipenv install

      - name: Execute lint with pipenv
        run: |
          pipenv --version
          pipenv run lint

  test:
    name: Backend Execute Test Cases
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Install pipenv with pip
        run: |
          pip --version
          pip install pipenv && pip install flake8

      - name: Setup Install dependencies with pip
        run: |
          pip --version
          pipenv install

      - name: Execute Test Cases with pipenv
        run: |
          pipenv --version
          pipenv run test

  build:
    name: Build and Push Docker Image to AWS ECR
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ~/.docker
          key: docker-${{ github.sha }}-backend
          restore-keys: |
            docker-${{ github.sha }}-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Debug AWS Credentials
        run: |
          aws sts get-caller-identity

      - name: Connect to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build and Deploy Docker Image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: latest
        run: |
          echo "=== Step: Logging Docker Image Details ==="
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"

          echo "=== Step: Building Docker Image ==="
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          if [ $? -eq 0 ]; then
            echo "Docker Image Built Successfully"
          else
            echo "Error: Docker Image Build Failed" >&2
            exit 1
          fi

          echo "=== Step: Listing Docker Images ==="
          docker images

          echo "=== Step: Pushing Docker Image to ECR ==="
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          if [ $? -eq 0 ]; then
            echo "Docker Image Pushed Successfully"
          else
            echo "Error: Docker Image Push Failed" >&2
            exit 1
          fi

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Debug AWS Credentials
        run: |
          aws sts get-caller-identity

      - name: Connect to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Update config kubeconfig
        run: aws eks update-kubeconfig --name cluster

      - name: Run init.sh
        run: |
          chmod +x ./setup/init.sh
          ./setup/init.sh || true

      - name: Configure Docker Image in Kustomize
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: latest
        run: |
          echo "=== Step: Logging Kustomize Configuration Details ==="
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          echo "Working Directory: ./backend/k8s"
          
          echo "=== Step: Configuring Docker Image in Kustomize ==="
          kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          if [ $? -eq 0 ]; then
            echo "Kustomize configuration updated successfully."
          else
            echo "Error: Failed to update Kustomize configuration." >&2
            exit 1
          fi
          
          echo "=== Step: Verifying Kustomize Configuration ==="
          kustomize build ./backend/k8s | grep "image:" || echo "Warning: No image configuration found." 

      - name: Deploy Kubernetes Resources
        run: |
          echo "=== Step: Preparing to Deploy Kubernetes Resources ==="
          echo "Working Directory: ./backend/k8s"

          echo "=== Step: Building Kubernetes Manifests with Kustomize ==="
          kustomize build ./backend/k8s > k8s-manifest.yaml
          if [ $? -eq 0 ]; then
            echo "Kustomize build completed successfully. Output saved to k8s-manifest.yaml."
          else
            echo "Error: Kustomize build failed." >&2
            exit 1
          fi

          echo "=== Step: Applying Kubernetes Resources ==="
          kubectl apply -f k8s-manifest.yaml
          if [ $? -eq 0 ]; then
            echo "Kubernetes resources deployed successfully."
          else
            echo "Error: Failed to deploy Kubernetes resources." >&2
            exit 1
          fi

          echo "=== Step: Verifying Kubernetes Resource Deployment ==="
          kubectl get all -n default || echo "Warning: Unable to retrieve Kubernetes resources."
        working-directory: ./backend/k8s